/**
 * generated by Xtext 2.13.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.xtext.example.mydsl.myDsl.DataType;
import org.xtext.example.mydsl.myDsl.Entity;
import org.xtext.example.mydsl.myDsl.Features;
import org.xtext.example.mydsl.myDsl.Type;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Iterable<Entity> filter = Iterables.<Entity>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Entity.class);
    for (final Entity e : filter) {
      String _name = e.getName();
      String _plus = ("entities/" + _name);
      String _plus_1 = (_plus + ".java");
      fsa.generateFile(_plus_1, this.compile(e));
    }
  }
  
  public CharSequence compile(final Entity e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package entities;");
    _builder.newLine();
    _builder.append("public class ");
    String _name = e.getName();
    _builder.append(_name);
    {
      Entity _supertype = e.getSupertype();
      boolean _tripleNotEquals = (_supertype != null);
      if (_tripleNotEquals) {
        _builder.append(" extends ");
        String _name_1 = e.getSupertype().getName();
        _builder.append(_name_1);
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    {
      EList<Features> _features = e.getFeatures();
      for(final Features attr : _features) {
        _builder.append("private ");
        String _returnType = this.getreturnType(attr.getType());
        _builder.append(_returnType);
        _builder.append(" ");
        String _name_2 = attr.getName();
        _builder.append(_name_2);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      EList<Features> _features_1 = e.getFeatures();
      for(final Features attr_1 : _features_1) {
        _builder.append("public ");
        String _returnType_1 = this.getreturnType(attr_1.getType());
        _builder.append(_returnType_1);
        _builder.append(" get");
        String _firstUpper = StringExtensions.toFirstUpper(attr_1.getName());
        _builder.append(_firstUpper);
        _builder.append("()");
        _builder.newLineIfNotEmpty();
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("return ");
        String _name_3 = attr_1.getName();
        _builder.append(_name_3, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
        _builder.append("public set");
        String _firstUpper_1 = StringExtensions.toFirstUpper(attr_1.getName());
        _builder.append(_firstUpper_1);
        _builder.append("(");
        String _returnType_2 = this.getreturnType(attr_1.getType());
        _builder.append(_returnType_2);
        _builder.append(" ");
        String _name_4 = attr_1.getName();
        _builder.append(_name_4);
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("{");
        _builder.newLine();
        _builder.append("this.");
        String _name_5 = attr_1.getName();
        _builder.append(_name_5);
        _builder.append("=");
        String _name_6 = attr_1.getName();
        _builder.append(_name_6);
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public String getreturnType(final Type type) {
    return this.typeToString(type);
  }
  
  protected String _typeToString(final DataType type) {
    String _xifexpression = null;
    String _name = type.getName();
    boolean _equals = Objects.equal(_name, "string");
    if (_equals) {
      _xifexpression = "String";
    } else {
      _xifexpression = type.getName();
    }
    return _xifexpression;
  }
  
  protected String _typeToString(final Entity type) {
    return type.getName();
  }
  
  public String typeToString(final Type type) {
    if (type instanceof DataType) {
      return _typeToString((DataType)type);
    } else if (type instanceof Entity) {
      return _typeToString((Entity)type);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(type).toString());
    }
  }
}

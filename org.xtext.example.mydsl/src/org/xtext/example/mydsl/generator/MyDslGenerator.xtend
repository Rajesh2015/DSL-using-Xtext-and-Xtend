/*
 * generated by Xtext 2.13.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.myDsl.Entity
import org.xtext.example.mydsl.myDsl.Type
import org.xtext.example.mydsl.myDsl.DataType

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
val filter = resource.allContents.toIterable.filter(Entity)
	for(e:filter)
	
	{
		fsa.generateFile("entities/"+e.name+".java",e.compile)
	}

}
def compile(Entity e)
{
	'''
	package entities;
	public class «e.name»«IF e.supertype !== null» extends «e.supertype.name»«ENDIF»
	{
	«FOR attr:e.features»
	private «attr.type.getreturnType» «attr.name»
	«ENDFOR»
	
	«FOR attr:e.features»
		public «attr.type.getreturnType» get«attr.name.toFirstUpper»()
		{
			return «attr.name»;
		}
		public set«attr.name.toFirstUpper»(«attr.type.getreturnType» «attr.name»)
		{
		this.«attr.name»=«attr.name»
		}
		«ENDFOR»
		
	}
	'''
	
}
		
		def  getreturnType(Type type)
		{
			typeToString(type);
		}
	
	def dispatch typeToString(DataType type) {
 if (type.name == "string") "String"
 else type.name
}
def dispatch typeToString(Entity type) {
  type.name
}	

}
